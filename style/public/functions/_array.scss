//  freverse
//  -
/// 返回一个元素顺序被反转的 list 对象
/// @param {list} $list -
/// @param {list} -
/// @example
///   freverse(1 2 3) //(3 2 1)
@function freverse($list){
  $this-list: ();
  $this-length: length($list);

  @for $i from 1 through $this-length{
    $this-item: nth($list, $this-length - $i + 1);
    $this-list: append($this-list, $this-item);
  }

  @return $this-list;
}

//  fconcat
//  -
/// 返回一个新数组，这个新数组是由多数组组合而成
/// - 当不传任何参数时，返回一个空数组
/// - 当参数类型不为 list 时，将会被转换成长度为 1 的数组再进行合并
/// @param {object<list>} $args 进行合并（参数）集合
/// @return {list} -
/// @example
///   fconcat()     //()
///   fconcat(1px)  //(1px,)
///   fconcat((1 2), (a, b, c), f, (z x y)) //(1 2 a b c f z x y)
@function fconcat($args...){
  $this-length: length($args);

  @if $this-length == 0{
    @return ();
  }

  $this-first: nth($args, 1);

  @if type-of($this-first) != list{
    $this-first: append((), $this-first);
  }
  
  @if $this-length == 1{
    @return $this-first;
  }

  $this-list: $this-first;
  $this-count: 2;

  @while $this-count <= $this-length{
    $this-item: nth($args, $this-count);

    @if type-of($this-item) != list{
      $this-item: append((), $this-item);
    }

    @each $value in $this-item{
      $this-list: append($this-list, $value);
    }

    $this-count: $this-count + 1;
  }

  @return $this-list;
}

//  fslice
//  -
/// 返回一个数组的一段
/// - 注意该方法的行为与 scss 的 str-slice 不一样，而是与 javascript 的 [].slice 类似
/// @param {list} $list 数组
/// @param {number} $start 开始位置（从 0 开始计算的下标）
/// - 如果 $start 为负，将它作为 length（数组的长度） + $start 处理
/// @param {number} $end [-1] 结束位置（从 0 开始计算的下标）
/// - 如果 $end 为负，将它作为 length（数组的长度） + $end 处理
/// - 如果 $start > $end，不复制任何元素到新数组中
/// - 复制的元素包含 $end 所指定的元素
/// @return {list} -
/// @example
///   fslice(a b c d, 0, 2)   //(a b c)
///   fslice(a b c d, 1, -3)  //(b,)
@function fslice($list, $start, $end: -1){
  $this-length: length($list);
  $this-start: if($start < 0, $this-length + $start, $start) + 1;
  $this-start: if($this-start < 1, 1, $this-start);
  $this-end: if($end < 0, $this-length + $end, $end) + 1;
  $this-list: ();

  @for $i from $this-start through $this-end{
    $this-item: nth($list, $i);
    $this-list: append($this-list, $this-item);
  }

  @return $this-list;
}

//  fset-nth
//  -
/// 替换列表中的第 n 项
/// - 防止 scss 中的 set-nth 方法被取消而做的一个兼容方法
/// - 方法中对参数做了更强的处理
/// @param {list} $list -
/// @param {number} $n 要替换项的位置
/// @param {object} $value 替换值
/// @return {list} -
/// @example
///   fset-nth(1 2 3, 2, a) //1 a 3
@function fset-nth($list, $n, $value){
  @if type-of($list) == list and type-of($n) == number{
    $n: floor($n);
    $this-length: length($list);

    @if $n > 0 and $n <= $this-length{
      @if function-exists(set-nth) == false{
        @return set-nth($list, $n, $value);
      } @else{
        $this-list: ();

        @for $i from 1 through $this-length{
          $this-item: if($i == $n, $value, nth($list, $i));
          $this-list: append($this-list, $this-item);
        }

        @return $this-list;
      }
    }
  }

  @return $list;
}