$gcalc-left: '('; //字符：左括号
$gcalc-right: ')'; //字符：右括号
$gcalc-default-multiple: 1; //multiple 默认值
$gcalc-default-mode: 0; //mode 默认值

//  fcalc
//  -
/// 对原生函数 calc 添加计算功能
/// @param {number|string|list|map<list>} $list -
/// @return {number|string} -
/// @throw 类型错误
/// @throw 不是有效的 calc 表达式
/// @throw 未找到结束标记
/// @example
///   fcalc((exp: 5px, multiple: var(-b)))  //calc(5px / var(-b))
@function fcalc($list...){
  @if length($list) == 0{
    @return 0;
  }

  $this-list: fcalc-conver($list);
  $this-list: fcalc-merge8quantity($this-list);
  $this-list: fcalc-merge8exp($this-list);
  $this-classify: fcalc-classify8option($this-list);
  $this-classify: fcalc-merge8unit($this-classify);
  $this-classify: fcalc-merge8option($this-classify);

  @return fcalc-output($this-classify);
}

//  fcalc-list
//  -
/// fcalc 列表模式
/// @param {list} $list 非list类型值将会被强制转换成长度为1的list类型
/// @param {list} $multiples [()] -
/// - 空类型的值会被转换为一个空数组
/// - 非空且非list类型值会被强制转换成长度为1的list类型
/// - 如果对应的 mode 或 multiple 不存在，则使用全局默认值
/// @param {list} $modes [()] 同参数 $multiples
/// @example
///   fcalc-list(
///     (100% 5px --b calc(50vw - 2rem)),
///     (1 -1 2 5),
///     (1 1 0 0)
///   ) //calc(100% - 5px + 10vw - 0.4rem + var(--b) / 2)
@function fcalc-list($list, $multiples: (), $modes: ()){
  $list: f2list($list);
  $multiples: f2list($multiples);
  $modes: f2list($modes);
  $through: length($list);
  $array: ();

  @for $i0 from 0 to $through{
    $i: $i0 + 1;
    $array: append($array, (
      exp: nth($list, $i),
      multiple: fget-nth($multiples, $i, $gcalc-default-multiple),
      mode: fget-nth($modes, $i, $gcalc-default-mode),
    ));
  }

  @return fcalc($array);
}

//  fcalc-option
//  -
/// fcalc 配置模式
/// @param {list} $list 非list类型值将会被强制转换成长度为1的list类型
/// @param {list} $option [()] -
/// - 空类型的值会被转换为一个空数组
/// - 非空且非list类型值会被强制转换成长度为1的list类型
/// - 数组奇数位为 mode，偶数为为 multiple
/// - 如果对应的 mode 或 multiple 不存在，则使用全局默认值
/// @example
///   fcalc-option(
///     (100% 5px --b calc(50vw - 2rem)),
///     (1 1 1 -1 0 2 0 5)
///   ) //calc(100% - 5px + 10vw - 0.4rem + var(--b) / 2)
@function fcalc-option($list, $option: ()){
  $list: f2list($list);
  $option: f2list($option);

  $through: length($list);
  $length: length($option);
  $array: ();

  @for $i0 from 0 to $through{
    $i: $i0 + 1;

    $array: append($array, (
      exp: nth($list, $i),
      multiple: fget-nth($option, $i * 2, $gcalc-default-multiple),
      mode: fget-nth($option, $i * 2 - 1, $gcalc-default-mode),
    ));
  }

  @return fcalc($array);
}

//  fcalc-single
//  -
/// fcalc 单例模式
/// @param {number|string|list|map} $value -
/// @param {number|string} $multiple [$gcalc-default-multiple] 除数（或乘数）
/// @param {0|1} $mode [$gcalc-default-mode] 表示进行除法（或乘法）运算
/// @example
///   fcalc-single(5px 6%, 2) //calc(2.5px + 3%)
@function fcalc-single($value, $multiple: $gcalc-default-multiple, $mode: $gcalc-default-mode){
  @return fcalc((
    exp: $value,
    multiple: $multiple,
    mode: $mode,
  ));
}

//  fcalc-output
//  -
/// 输出
/// @access private
/// @param {map} $classify -
/// @return {number|string} -
@function fcalc-output($classify){
  $this-sum: '';

  @each $key, $value in $classify{
    $this-list: map-get($value, list);
    $this-option: map-get($value, option);
    $this-length: length($this-list);
    $this-through: length($this-option) / 2;
    $this-first2negative: false; //该组的第一项是否为负数（CSS var 不为正负数）
    $this-value: nth($this-list, 1);
    $this-sum4empty: f4empty($this-sum);

    //优化 multiple 为 1 时，加减号问题
    @if $this-sum4empty == false and type-of($this-value) == number and $this-value < 0{ //1、不为第一项；2、值为数字；3、值为负数
      $this-value: $this-value * -1;
      $this-first2negative: true;
    }

    @if $this-length > 1{ //处理多项
      @for $i from 2 through $this-length{ //拼接项
        $this-item: nth($this-list, $i);

        @if type-of($this-item) == number and $this-item < 0{
          $this-value: '#{$this-value} - #{$this-item * -1}';
        } @else{
          $this-value: '#{$this-value} + #{$this-item}';
        }
      }

      @if $this-through > 0{ //多项且 multiple 不为 1， 则需要添加小括号
        $this-value: '(#{$this-value})';
      }

    }

    $this-multiple2negative: false; //multiple 是否为负数（多个值则不为负数）

    //优化 multiple 为 负值时，加减号问题
    @if $this-through == 1{ //只有一个值
      $this-count: 2;
      $this-multiple: nth($this-option, $this-count);

      @if type-of($this-value) == number 
        and type-of($this-multiple) == number 
        and $this-multiple < 0{ //需满足条件：1、$this-value为数字；2、$this-multiple为负数
        $this-option: fset-nth($this-option, $this-count, $this-multiple * -1);
        $this-multiple2negative: true;
      }
    }

    @if $this-through > 0{
      @for $i0 from 0 to $this-through{ //拼接 multiple
        $i: $i0 + 1;
        $this-index: $i * 2;
        $this-multiple: nth($this-option, $this-index);
  
        @if $this-multiple != 1{ //避免 multiple = 1 被加入到输出
          @if nth($this-option, $this-index - 1) == 0{ //判断除（或乘）号
            $this-value: '#{$this-value} / #{$this-multiple}';
          } @else{
            $this-value: '#{$this-value} * #{$this-multiple}';
          }
        }
      }
    }

    $this-negative: $this-first2negative or $this-multiple2negative;

    @if $this-first2negative and $this-multiple2negative{ //负负为正
      $this-negative: false;
    }

    @if $this-sum4empty{ //例：a
      $this-sum: if(
        $this-negative,
        if(
          type-of($this-value) == number,
          $this-value * -1,
          str-slice($this-value, 1)
        ),
        $this-value,
      );
    } @else{ // 例：a + b
      $this-symbol: if($this-negative, '-', '+');
      $this-sum: '#{$this-sum} #{$this-symbol} #{$this-value}';
    }
  }

  @if f4empty($this-sum){
    $this-sum: 0;
  } @else if type-of($this-sum) == string and not(fcalc4var($this-sum)){
    $this-sum: unquote('calc(#{$this-sum})');
  }

  @return $this-sum;
}

//  fcalc-merge8exp
//  -
/// 合并相同表达式
/// @access private
/// @param {list} $list -
/// @return {list} -
@function fcalc-merge8exp($list){
  $this-classify: fcreate();
  $this-count: 1;

  @each $value in $list{
    $this-exp: map-get($value, exp);
    $this-option: map-get($value, option);
    $this-key: unquote('#{$this-exp}');
    $this4merge: false; //是否可以合并

    //合并相同项
    @if type-of($this-exp) == string{ //表达式为字符串
      $this-size: length($this-option);

      @if $this-size == 0{ //空的 multiple 为 1 的省略形式
        $this4merge: true;
      } @else if $this-size == 2{ //只有一个 multiple 且为乘法
        $this-mode: nth($this-option, 1);
        $this-multiple: nth($this-option, 2);

        @if type-of($this-multiple) == number{ //数字类型则都算
          $this4merge: true;
        } @else if nth($this-option, 1) == 1{ //字符类型只能为乘法
          $this4merge: true;
        }
      }
    }

    @if $this4merge == false{ //防止不满足条件的项被合并进去
      $this-key: $this-key + $this-count;
      $this-count: $this-count + 1;
    }

    $this-value: map-get($this-classify, $this-key) or ();
    $this-value: append($this-value, $value);
    $this-classify: map-merge($this-classify, (
      #{$this-key}: $this-value,
    ));
  }

  $this-list: ();
  
  @each $key, $value in $this-classify{
    $this-push: true; //合并后的项是否还需要加入列表中（全部抵消后，multiple = 0）

    @if length($value) > 1{
      $this-num: 0;
      $this-multiples: ();
      $this-exp: null;
      @each $val in $value{
        @if f4empty($this-exp){
          $this-exp: map-get($val, exp);
        }

        $this-option: map-get($val, option);
        
        @if length($this-option) == 0{ //长度为 0 则取默认值 1
          $this-num: $this-num + 1;
        } @else{
          $this-multiple: nth($this-option, 2);
          @if type-of($this-multiple) == number{
            @if nth($this-option, 1) == 0{ //如果为除法要先转为乘法
              $this-multiple: 1 / $this-multiple;
            }

            $this-num: $this-num + $this-multiple;
          } @else{
            $this-multiples: append($this-multiples, $this-multiple);
          }
        }
      }

      $this-option: ();
      @if $this-num == 0{ //没有数字类型的 multiple（或者在合并过程中互相抵消）
        $this-option: $this-multiples;
      } @else{ //包含字符 multiple 的合并
        $this-value: '';

        @each $val in $this-multiples{ //先将字符 multiple 合并
          @if f4empty($this-value){
            $this-value: $val;
          } @else{
            $this-value: $this-value + $val;
          }
        }

        //再和数字 multiple 合并
        @if f4empty($this-value){
          $this-value: $this-num;
        } @else{
          $this-symbol: '+';

          @if $this-num < 0{
            $this-symbol: '-';
            $this-num: $this-num * -1;
          }

          $this-value: '(#{$this-value} #{$this-symbol} #{$this-num})';
        }

        $this-option: (1 $this-value);
      }

      @if length($this-option) == 0{ //此时的空数组和属性 option 中的空数组是不一样，该空数组表示 multiple = 0
        $this-push: false;
      } @else{
        $value: (
          exp: $this-exp,
          option: $this-option,
        );
        $value: ($value,);
        $value: fcalc-merge8quantity($value); //再次合并 multiple，删除多余项
        $value: nth($value, 1);
      }
    } @else{
      $value: nth($value, 1);
    }

    @if $this-push{
      $this-list: append($this-list, $value);
    }
  }

  @return $this-list;
}

//  fcalc-merge8option
//  -
/// 将相同 option 项归类在一起
/// @access private
/// @param {map} $classify -
/// @return {map} -
@function fcalc-merge8option($classify){
  $this-classify: fcreate();

  @each $key, $value in $classify{
    $this-value: map-get($value, value);
    
    @if $this-value != 0{
      $this-option: map-get($value, option);
      $this-key: unquote('#{$this-option}');
      $this-cache: map-get($this-classify, $this-key) or (
        list: (),
        option: $this-option,
      );
      $this-list: map-get($this-cache, list);
      $this-list: append($this-list, $this-value);
      $this-cache: map-merge($this-cache, (
        list: $this-list,
      ));
      $this-classify: map-merge($this-classify, (
        #{$this-key}: $this-cache,
      ));
    }
  }

  @return $this-classify;
}

//  fcalc-merge8unit
//  -
/// 合并相同单位的项
/// @access private
/// @param {map} $classify
/// @return {map} -
@function fcalc-merge8unit($classify){
  $this-classify: fcreate();

  @each $key, $value in $classify{
    $this-list: map-get($value, list);
    $this-option: map-get($value, option);

    @each $item in $this-list{
      $this-key: $key;
      $this-value: fcreate();

      @if type-of($item) == number{
        $this-key: $key + unit($item);
        $this-value: map-get($this-classify, $this-key) or (
          value: 0,
          option: $this-option,
        );
        $this-value: map-merge($this-value, (
          value: map-get($this-value, value) + $item,
        ));
      } @else{
        $this-key: $key + $item;
        $this-value: (
          value: $item,
          option: $this-option,
        );
      }

      $this-classify: map-merge($this-classify, (
        #{$this-key}: $this-value,
      ));
    }
  }

  @return $this-classify;
}

//  fcalc-classify8option
//  -
/// 将列表通过 option 进行归类
/// @access private
/// @param {list} $list -
/// @return {map} -
/// @example
///   fcalc-classify8option(
///     (
///       (exp: 4em, option: ()) 
///       (exp: 5%, option: ()) 
///       (exp: 4em, option: (0 3))
///     )
///   ) //(: (option: (), list: 4em 5%), 0 3: (option: 0 3, list: (4em,)))
@function fcalc-classify8option($list){
  $this-classify: fcreate();

  @each $value in $list{ //通过 option 信息进行归类
    $this-exp: map-get($value, exp);
    $this-option: map-get($value, option);
    $this-key: unquote('#{$this-option}');

    $this-value: map-get($this-classify, $this-key) or (
      option: $this-option,
    );
    $this-list: map-get($this-value, list) or ();
    $this-list: append($this-list, $this-exp);
    $this-value: map-merge($this-value, (
      list: $this-list,
    ));
    $this-classify: map-merge($this-classify, (
      #{$this-key}: $this-value,
    ));
  }

  @return $this-classify;
}

//  fcalc-merge8quantity
//  -
/// 合并 multiple
/// @access private
/// @param {list} $list -
/// @return {list} -
/// @example
///   fcalc-merge8quantity(((exp: 8px, option: (0 2 0 2)),)) //((exp: 2px, option: ()),)
@function fcalc-merge8quantity($list){
  $this-list: ();

  @each $value in $list{
    $this-exp: map-get($value, exp);
    
    @if $this-exp != 0{ //exp 值为 0 的操作可以忽略，例：0 / x
      $this-option: map-get($value, option);
      $this-length: length($this-option);
      $this-through: $this-length / 2; //只有偶数项才是 multiple，所以只要查找 length / 2 次
      $this-newOption: ();
      $this-exp4number: type-of($this-exp) == number;
      $this-multiples: 1;

      @for $i0 from 0 to $this-through{
        $i: $i0 + 1;
        $this-multiple: fget-nth($this-option, $i * 2, 1);
        $this-mode: fget-nth($this-option, $i * 2 - 1, 1);
        $this-ignore: false; //是否忽略本次的 multiple
        $this-multiple4number: type-of($this-multiple) == number and fvector($this-multiple) != 1%; //百分比的值将被视为字符串

        @if $this-multiple == 1{ //multiple 值为 1 的操作（忽略），例：x * 1
          $this-ignore: true;
        } @else if $this-exp4number and $this-multiple4number and f4rational($this-exp, $this-multiple, $this-mode){ //两数可以除尽，则将表达式进行运算后（忽略）
          $this-ignore: true;

          @if $this-mode == 0{
            $this-exp: $this-exp / $this-multiple;
          } @else{
            $this-exp: $this-exp * $this-multiple;
          }
        } @else if $this-exp == $this-multiple and $this-mode == 0{ //表达式和 multiple 相同且为除法运算，则将表达式值赋值为 1（忽略）
          $this-ignore: true;
          $this-exp: 1;
        } @else if $this-multiple4number and f4rational($this-multiples, $this-multiple, $this-mode){ //排除以上情况后，如果 multiple 可以统合在一起，则将 multiple 统合（忽略）
          $this-ignore: true;
          
          @if $this-mode == 0{
            $this-multiples: $this-multiples / $this-multiple;
          } @else{
            $this-multiples: $this-multiples * $this-multiple;
          }
        }

        @if $this-ignore == false{
          $this-newOption: fconcat($this-newOption, ($this-mode $this-multiple));
        }
      }

      @if $this-multiples != 1{
        $this-value: fcalc-quite2length($this-multiples, 1);
        $this-newOption: fconcat($this-newOption, $this-value);
      }

      $this-list: append($this-list, (
        exp: $this-exp,
        option: $this-newOption,
      ));
    }
  }

  @return $this-list;
}

//  fcalc-quite2length
//  -
/// 比较数与其倒数的（字符）长度，取长度短的进行操作
/// @access private
/// @param {number} $value -
/// @param {0|1} $mode 表示除法（或乘法）
/// @return {list} -
/// @example
///   fcalc-quite2length(.5, 0) //(value: 2, mode: 1)
@function fcalc-quite2length($value, $mode){
  $this-length: str-length('#{$value}');
  $this-reciprocal: 1 / $value;
  
  @if $this-length > str-length('#{$this-reciprocal}'){
    $value: $this-reciprocal;
    $mode: if($mode == 0, 1, 0);
  }

  @return ($mode $value);
}

//  fcalc-conver
//  -
/// 转换表达式
/// @access private
/// @param {list} $list 表达式集合
/// @return {list} -
/// @throw 类型错误
/// @example
///   fcalc-conver(calc('2px + 5%'), (3px, 2cm))  //(exp: 2px, option: ()) (exp: 5%, option: ()) (exp: 3px, option: 0 1) (exp: 2cm, option: 0 1)
@function fcalc-conver($list){
  $this-list: ();

  @each $value in $list{
    $this-type: type-of($value);
    $this-value: ();

    @if $this-type == number{         //例：4px
      $this-value: fcalc-default($value);
    } @else if $this-type == string{  //例：'calc(2px + 4vh)'
      $this-value: fcalc-converString($value);
    } @else if $this-type == list{    //例：(4px, 'calc(2px + 4vh)')
      $this-value: fcalc-conver($value);
    } @else if $this-type == map{     //例：(exp: 5px, multiple: 3, mode: 1)
      $this-value: fcalc-converMap($value);
    } @else {
      @error 'fcalc 不支持 #{$this-type} 类型 { #{$value} }';
    }

    $this-list: fconcat($this-list, $this-value);
  }

  @return $this-list;
}

//  fcalc-converMap
//  -
/// 转换 map 表达式
/// @access private
/// @param {map} -
/// @return {list} -
/// @throw 非法表达式
/// @example
///   fcalc-converMap((exp: (7% -2vh), multiple: 2, mode: 1))  //(exp: 7%, option: 1 2 0 1) (exp: -2vh, option: 1 2 0 1)
@function fcalc-converMap($value){
  $this-exp: map-get($value, exp);

  @if map-has-key($value, option) == false{
    $this-multiple:  map-get($value, multiple) or $gcalc-default-multiple;
    $this-mode: map-get($value, mode) or $gcalc-default-mode;

    $value: fcalc-default($this-exp, $this-multiple, $this-mode);
    $this-exp: map-get($value, exp);
  }

  $this-option: map-get($value, option);
  $this-exp: ($this-exp,);
  $this-conver: fcalc-conver($this-exp);
  $this-list: ();

  @each $val in $this-conver{
    $this-items: map-get($val, option);
    $this-value: (
      exp: map-get($val, exp),
      option: fconcat($this-option, $this-items),
    );
    $this-list: append($this-list, $this-value);
  }

  @return $this-list;
}

//  fcalc-pushOption
//  -
/// 往表达式中添加配置项，并返回新的表达式
/// @access private
/// @param {map} $value 表达式
/// @param {number|string} $multiple 除数（或乘数）
/// @param {0|1} $mode 表示除法（或乘法）
/// @return {map} -
/// @example
///   fcalc-pushOption((exp: 2px, option: (0 2 1 3), 5, 1)) //(exp: 2px, option: (0 2 1 3 1 5)
@function fcalc-pushOption($value, $multiple, $mode){
  $this-option: map-get($value, option);

  @if f4empty($this-option) != false and type-of($this-option) == list{
    $this-option: fconcat($this-option, ($mode $multiple));

    @return map-merge($value, (
      option: $this-option,
    ));
  } @else{
    $this-exp: map-get($value, exp);

    @return fcalc-default($this-exp, $multiple, $mode);
  }
}

//  fcalc-converString
//  -
/// 转换 string 表达式
/// @access private
/// @param {string} -
/// @return {map|list} -
/// @throw 非法表达式
/// @example
///   fcalc-converString('123px') //(exp: 123px, option: (0 1))
@function fcalc-converString($value){
  $this-value: ();

  @if fcalc6operator($value){ //例：'calc(2px + 3vh)'
    @if fcalc4calc($value){
      $this-value: fcalc-ast($value);
    } @else{
      @error '不是一个有效的字符串 calc 表达式 { #{$value} }';
    }
  } @else if fcalc4var($value){ //例：var(--a)
    $this-value: fcalc-default($value);
  } @else if fcalc4var($value, false){ //例：--a
    $this-value: fcalc-default(unquote('var(#{$value})'));
  } @else{ //例：123px
    $this-value: f2num($value, true);
    $this-value: fcalc-default($this-value);
  }

  @return $this-value;
}

//  fcalc-ast
//  -
/// 解析（字符串）为抽象语法树
/// @access private
/// @param {string} $value 字符串表达式
/// @return {list} -
/// @example
///   fcalc-ast('calc(6px / 4 - 2px)')  //(exp: 6px, option: 0 4) (exp: 2px, option: 1 -1)
@function fcalc-ast($value){
  $this-value: $value;

  @if fcalc4calc($value){
    $this-value: str-slice($value, 6, -2);
  }

  $this-length: str-length($this-value);
  $this-list: ();
  $this-childs: ();
  $this-count: 1;
  $this-current: null;
  $i: 1;

  @while $i <= $this-length{
    $this-item: str-slice($this-value, $i, $i);
    @if $this-item == $gcalc-left and str-slice($this-value, $i - 3, $i - 1) != var{ //获取子项方式1：把字符串表达式通过第一级的括号切分
      $this-stop: fcalc-bracketsQuery($this-value, $i);
      $this-exp: str-slice($this-value, $i + 1, $this-stop - 1);
      $this-option: ();

      @if fcalc4Minusexp($this-value, $i){ //处理减法运算
        $this-option: (1 -1);
      }

      $this-current: (
        exp: $this-exp,
        option: $this-option,
      );

      $this-list: append($this-list, $this-current);

      @if fcalc6child($this-exp){ //记录子项为组合项的位置
        $this-childs: append($this-childs, length($this-list));
      }

      $this-count: $this-stop + 1;
      $i: $this-stop;
    } @else if fcalc-next4multiple($this-value, $i){ //查找出除数（或乘数）
      
      $this-data: fcalc-multipleQuery($this-value, $i);
      $this-option: map-get($this-data, option);

      @if $this-count + 1 != $i{ //获取子项方式3：无法被其他获取方式捕获到的其它子项
        $this-exp: str-slice($this-value, $this-count, $i - 2);

        @if fcalc4var($this-exp) == false{ //如果是数字字符串项则转换为数字
          $this-exp: f2num($this-exp, true);
        }
        
        @if fcalc4Minusexp($this-value, $this-count){ //处理减法运算
          $this-option: fconcat($this-option, 1 -1);
        }

        $this-current: (
          exp: $this-exp,
        );

        $this-list: append($this-list, $this-current);
      }

      $this-cache: map-get($this-current, option);

      @if f4empty($this-cache) == false{
        $this-option: fconcat($this-cache, $this-option);
      }

      $this-current: map-merge($this-current, (
        option: $this-option,
      ));
      $this-list: fset-nth($this-list, length($this-list), $this-current);
      $this-next: map-get($this-data, next);
      $this-count: $this-next + 3;
      $i: $this-next;
    } @else if (fcalc4next($this-value, $i) and ($i - $this-count > 2)) or ($i == $this-length and $this-count < $i){ //获取子项方式1：单项无除数（或乘数）表达式
      $this-at: if($i == $this-length, -1, $i - 2); //需要判断是否已经是末尾
      $this-exp: str-slice($this-value, $this-count, $this-at);
      
      @if fcalc4var($this-exp) == false{ //如果是数字字符串项则转换为数字
        $this-exp: f2num($this-exp, true);
      }
      
      $this-option: ();

      @if fcalc4Minusexp($this-value, $this-count){ //处理减法运算
        $this-option: (1 -1);
      }

      $this-current: (
        exp: $this-exp,
        option: $this-option,
      );
      $this-list: append($this-list, $this-current);
      $this-count: $i + 2;
      $i: $i + 1; //跳过下一个空格
    }

    $i: $i + 1;
  }

  //深度分解子项，最终得到一个深度为 1 的数组
  @each $value in $this-childs{
    $this-item: nth($this-list, $value);
    $this-exp: map-get($this-item, exp);
    $this-option: map-get($this-item, option);
    $this-cache: fcalc-ast($this-exp);
    $this-length: length($this-cache);
    
    @for $i0 from 0 to $this-length{
      $i: $i0 + 1;
      $this-self: nth($this-cache, $i);
      $this-self-option: map-get($this-self, option);
      $this-self-option: fconcat($this-option, $this-self-option);
      $this-self-exp: (
        exp: map-get($this-self, exp),
        option: $this-self-option,
      );

      @if $i == 1{ //替换掉原来的项（防止位置变化）
        $this-list: fset-nth($this-list, $value, $this-self-exp);
      } @else{ //添加多出的项
        $this-list: append($this-list, $this-self-exp);
      }
    }
  }

  @return $this-list;
}

//  fcalc4Minusexp
//  -
/// 返回当前子表达式是否为减法运算
/// @access private
/// @param {string} $value -
/// @param {number} $start-index 子表达式的起始位置
/// @return {bool} -
/// @example
///   fcalc4Minusexp('2px - 3%', 7) //true
@function fcalc4Minusexp($value, $start-index){
  $this-index: $start-index - 2;

  @if $this-index > 0 and str-slice($value, $this-index, $this-index) == '-'{
    @return true;
  }

  @return false;
}

//  fcalc-multipleQuery
//  -
/// 返回查找出除数（或乘数）信息
/// @access private
/// @param {string} $value -
/// @param {number} $start-index 除法（或乘法）标识符的位置
/// @return {map} -
/// @example
///   fcalc-multipleQuery('5px / 3 * 2 + 2px', 5) //(next: 12, option: (0 3 1 2))
@function fcalc-multipleQuery($value, $start-index){
  $this-length: str-length($value);
  $this-start: $start-index + 2;
  $this-next: -1;
  $this-option: ();

  @if str-slice($value, $this-start, $this-start) == $gcalc-left{ //左括号开始表示是一个组合式的除数（或乘数）
    $this-index: fcalc-bracketsQuery($value, $this-start);
    $this-next: $this-index + 1;
    $this-option: fcalc-splitOption8push($this-option, $value, $start-index, $this-index);
  } @else{
    $this-while: true;
    $i: $start-index + 2;

    @while $this-while{
      $this-stop: -1;

      @if fcalc-next4multiple($value, $i) or fcalc4next($value, $i){ //检测到加减乘除运算
        $this-while: false;
        $this-stop: $i - 2;
        $this-next: $i - 1;
      } @else if $i == $this-length{ //到达字符串结束位置
        $this-while: false;
        $this-stop: $i;
        $this-next: $i + 1;
      }

      @if $this-while == false{ //结束循环体
        $this-option: fcalc-splitOption8push($this-option, $value, $start-index, $this-stop);
      }
      
      $i: $i + 1;
    }
  }
  
  @if fcalc-next4multiple($value, $this-next + 1){
    $this-data: fcalc-multipleQuery($value, $this-next + 1);
    $this-next: map-get($this-data, next);
    $this-list: map-get($this-data, option);
    $this-option: fconcat($this-option, $this-list);
  }

  @return (
    next: $this-next,
    option: $this-option,
  );
}

//  fcalc-splitOption8push
//  -
/// 截取除数（或乘数）信息并加入到列表中，并返回一个新列表
/// @access private
/// @param {list} $list 已有列表
/// @param {string} $value -
/// @param {number} $start-index 除数（或乘数）标识符的位置
/// @param {number} $stop-index 除数（或乘数）结束位置
/// @return {list} -
/// @example
///   fcalc-splitOption8push((), '5px / 2', 5, 7) //(0 2);
@function fcalc-splitOption8push($list, $value, $start-index, $stop-index){
  $this-multiple: str-slice($value, $start-index + 2, $stop-index);
  $this-mode: str-slice($value, $start-index, $start-index);
  $this-mode: if($this-mode == '/', 0, 1);
  $this-option: fcalc-multipleConver($this-multiple, $this-mode);

  @return fconcat($list, $this-option);
}

//  fcalc-multipleConver
//  -
/// 对字符串除数（或乘数）进行转换
/// @access private
/// @param {string} $multiple 除数（或乘数）
/// @param {0|1} $mode 表示除法（或乘法）
/// @return {list} -
/// @example
///   fcalc-multipleConver('(var(--c) / 2)', 0) //(0 'var(--c)' 1 2)
@function fcalc-multipleConver($multiple, $mode){
  $this-first: str-slice($multiple, 1, 1);
  $this-list: ($mode $multiple);

  //1、'-var(--a)' 为无效值；
  @if ($this-first == '-' or map-get($gnum-table, $this-first)) and str-slice($multiple, -1) != '%'{ //例：'-3' 可以转换为数字，10% 不可以转换为数字
    $multiple: f2num($multiple);
    $this-list: ($mode $multiple);
  } @else if $this-first == $gcalc-left{ //例：'(var(--a) / 2)'
    $this-value: str-slice($multiple, 2, -2);
    $this-value: '* #{$this-value}';
    $this-data: fcalc-multipleQuery($this-value, 1);
    @if map-get($this-data, next) - 1 == str-length($this-value){ //该组合式由多个除数（或乘数）组合得到
      $this-option: map-get($this-data, option);
      $this-through: length($this-option) / 2;
      $this-list: ();

      @for $i from 0 to $this-through{
        $i: $i + 1;
        $i1: $i * 2;
        $this-multiple: nth($this-option, $i1);
        $this-mode: nth($this-option, $i1 - 1);
        
        @if $mode == 0{ //组合式为除数，则分项除法变乘法、乘法变除法
          $this-mode: if($this-mode == 0, 1, 0);
        }

        @if type-of($this-multiple) == string{ //子项为字符串则继续进行转换
          $this-cache: fcalc-multipleConver($this-multiple, $this-mode);
          $this-list: fconcat($this-list, $this-cache);
        } @else{
          $this-list: fconcat($this-list, $this-mode, $this-multiple);
        }
      }
    }
  }

  @return $this-list;
}

//  fcalc4next
//  -
/// 返回之后的项是否为同级别的表达式
/// @access private
/// @param {string} $value -
/// @param {number} $index 开始检测位置
/// @return {bool} -
/// @example
///   fcalc4next('5px + 2px', 5)  //true
@function fcalc4next($value, $index){
  $this-item: str-slice($value, $index, $index);
  $this-next: $index + 1;

  @return ($this-item == '+' or $this-item == '-')
    and str-slice($value, $this-next, $this-next) == ' ';
}

//  fcalc-next4multiple
//  -
/// 返回之后的项是否为对应的除数（或乘数）
/// @access private
/// @param {string} $value -
/// @param {number} $index 需要检测的位置
/// @return {bool} -
/// @example
///   fcalc-next4multiple('5px / 3', 5)  //true 
@function fcalc-next4multiple($value, $index){
  $this-item: str-slice($value, $index, $index);

  @return $this-item == '*' or $this-item == '/';
}

//  fcalc-bracketsQuery
//  -
/// 返回对应右括号的位置
/// @access private
/// @param {string} $value -
/// @param {number} $start-index 左括号的位置
/// @return {number} -
/// @throw  无效表达式
/// @example
///   fcalc-bracketsQuery('a(b(c)d)e', 2) //6  
@function fcalc-bracketsQuery($value, $start-index){
  $this-length: str-length($value);
  $this-count: 1;
  $this-while: true;
  $i: $start-index + 1;

  @while $this-while and $i <= $this-length{
    $this-item: str-slice($value, $i, $i);

    @if $this-item == $gcalc-left{ //左括号则 +1 记录
      $this-count: $this-count + 1;
    } @else if $this-item == $gcalc-right{ //右括号则 -1 记录
      $this-count: $this-count - 1;
    }

    @if $this-count == 0{ //匹配到对应的右括号，则退出查找
      $this-while: false;
    } @else{
      $i: $i + 1;
    }
  }

  @if $this-count > 0{ //查找结束还没有找到对应的右括号，则说明该表达式有问题
    $this-exp: str-slice($value, $start-index);

    @error '无效表达式：#{$this-exp}，未找到对应的结束标记 )';
  }

  @return $i;
}

//  fcalc4calc
//  -
/// 返回字符串是否为 calc 表达式格式
/// @access private
/// @param {string} $value -
/// @return {bool} -
/// @example
///   fcalc4calc('calc(5px)') //true
///   fcalc4calc('5px')       //false
@function fcalc4calc($value){
  @return f4native($value, calc, 1);
}

//  fcalc4var
//  -
/// 返回字符串是否为 CSS var 格式
/// @access private
/// @param {string} $value -
/// @param {bool} $licit [true] 是否使用严格检测
/// - true：严格检测，必须被 var 函数包含
/// - false：宽松检测
/// @return {bool} -
/// @example
///   fcalc4var('var(--a)')  //true
///   fcalc4var(--a, false)  //true
@function fcalc4var($value, $licit: true){
  @if $licit{
    @return f4var($value);
  } @else{
    @return type-of($value) == string
      and str-length($value) > 2
      and str-slice($value, 1, 2) == '--';
  }
}

//  fcalc6operator
//  -
/// 返回字符串是否含有（加减乘除）运算符
/// @access private
/// @param {string} $value -
/// @return {bool} -
/// @example
///   fcalc6operator('5px + 2ch') //true
@function fcalc6operator($value){
  @if type-of($value) == string{
    $this-operators: ('+', '-', '*', '/');

    @each $val in $this-operators{
      @if fcalc6joiner($value, $val){
        @return true;
      }
    }
  }

  @return false;
}

//  fcalc6joiner
//  -
/// 返回字符串是否包含某种运算符
/// @access private
/// @param {string} $value -
/// @param {string} $joiner 运算符
/// @return {bool} -
/// @example
///   fcalc6joiner('5px + 2ch', '+')  //true
@function fcalc6joiner($value, $joiner){
  @return str-index($value, ' #{$joiner} ') != null;
}

//  fcalc-default
//  -
/// 返回一个表达式
/// @access private
/// @param {number|string|list|map} $exp [0] -
/// @param {number|string} $multiple [$gcalc-default-multiple] 除数（或乘数）
/// @param {0|1} [$gcalc-default-mode] 表示除法（或乘法）
/// @return {map} -
/// @example
///   fcalc-default(1px)  //(exp: 1px, option: (0 1))
@function fcalc-default($exp: 0, $multiple: $gcalc-default-multiple, $mode: $gcalc-default-mode){
  @return (
    exp: $exp,
    option: ($mode $multiple),
  );
}