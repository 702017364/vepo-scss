@import 'functions/for';

//  mkeyframes
//  -
/// @keyframes简写模式
/// @param {string|number|list} $name [''] -
/// - 检测是否为空值，如果为空值则随机分配一个值，以下三种情况会被认为是控制
/// - 1、空字符串或 null
/// - 2、值类型为 number
/// - 3、值类型为 list 且第一项类型不为 string 或空字符串或 null
/// @example
///   @include mkeyframes(abc){
///     0%{
///       opacity: 0;
///     }
///     100%{
///       opacity: 1;
///     }
///   }
@mixin mkeyframes($name: ''){
  $this-default: $gbasic-duration;
  $this-type: type-of($name);
  $this-name: '';
  $this-value: ();

  @if f4empty($name){
    $this-name: unique-id();
    $this-value: ($this-name $this-default);
  } @else if $this-type == string{
    $this-name: unquote($name);
    $this-value: ($this-name $this-default);
  } @else if $this-type == list{
    $this-name: nth($name, 1);
    
    @if f4empty($this-name) or type-of($this-name) != string{
      $this-name: unique-id();
      $this-value: fconcat($this-name, $name);
    } @else{
      $this-name: unquote($this-name);
      $this-value: $name;
    }
  } @else if $this-type == number{
    $this-name: unique-id();
    $this-value: ($this-name $name);
  }

  @if f4empty($this-name) == false{
    @keyframes #{$this-name}{
      @content;
    }

    animation: $this-value;
  }
}

//  mquick
//  -
/// 快速创建一个基于 em 为单位的 CSS Module（传入的可转换属性，其值单位（为 px、rem、无单位）都会被转换成 em）
/// @param {number} $font-size 当前环境的字体大小（支持单位 px、rem、无单位）
/// @param {map} $props 要进行转换的属性集合
/// @param {bool} $itself [true] 是否要在 mixin 中设置 font-size 属性
/// - 值会进行 f2rem 函数转换
/// @param {map} $option [$gquick-options] 配置
/// @example
///   @include mquick(
///     20px,
///     (width: 20px, height: 1rem, z-index: 1),
///     true,
///     (rem: true)
///   );
@mixin mquick($font-size, $props, $itself: true, $option: $gquick-options){
  @if type-of($font-size) == number and type-of($props) == map{
    $this-size: f2px($font-size);
    $this-unit: fvector($this-size);

    @if $this-unit == 1rem{ //如果单位为rem，则转成px
      $this-size: $this-size / 1rem * $gbasic-size;
    }

    $this4px: f4px($this-size);

    @if $this4px{
      @if $itself{
        font-size: f2rem($font-size);
      }
    }

    $this-excludes: (
      box-flex,
      box-flex-group,
      box-ordinal-group,
      column-count,
      column-span,
      flex,
      flex-grow,
      flex-shrink,
      font-weight,
      grid,
      grid-area,
      grid-column,
      grid-column-start,
      grid-column-end,
      grid-row,
      grid-row-start,
      grid-row-end,
      nav-index, 
      opacity,
      order,
      tab-size, 
      z-index,
      zoom,
    ); //设置不需要进行转换的属性集（避免误传导致转换错误）
    $this-excludes-length: length($this-excludes);
    $this4map: type-of($option);
    $this4rem2true: $this4map and map-get($option, rem) == true;

    @each $key, $value in $props{
      $this-value: $value;
      $this-type: type-of($value);
      $this4list: $this-type == list and length($this-value) > 0;

      @if $this-type == number or $this4list{ //值类型为 number 或 list 才需要进行转换
        @if index($this-excludes, $key) == null{
          $this-list: if($this4list, $this-value, ($this-value,));

          @for $i from 1 through length($this-list){
            $this-item: nth($this-list, $i);

            @if type-of($this-item) == number{
              $this-item: f2px($this-item);
              $this-vector: fvector($this-item);

              @if $this4rem2true and $this-vector == 1rem{ //单位 rem 转成 px
                $this-item: $this-item / 1rem * $gbasic-size;
                $this-vector: 1px;
              }

              @if $this4px and $this-vector == 1px{ //转换满足条件：1、字体单位为 px；2、当前属性值的单位为 px
                @if $this-item != 0{
                  $this-item: $this-item / $this-size * 1em;
                }
              }

              @if function-exists(set-nth){
                $this-list: fset-nth($this-list, $i, $this-item);
              }
            }
          }

          $this-value: if(
            $this4list,
            $this-list,
            nth($this-list, 1)
          );
        }
      }

      #{$key}: $this-value;
    }
  } @else{
    @error '参数格式错误';
  }
}