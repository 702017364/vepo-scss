/// 遍历输出 css 选择器和声明
/// - background-image 属性会自动调用 furl 方法对值进行处理
/// - @content 将被分配到每一个产生的选择器中
/// @param {map} $opts 格式（选择器：属性值 or 属性值列表）
/// @param {string} $prefix [''] 添加到 $opts 的选择器之前，生成一个新选择器
/// @param {string} $suffix [''] 添加到 $opts 的选择器之后，生成一个新选择器
/// @param {list|string} $list [background-position] 属性列表
/// - string 类型的值会被自动转换为 list 类型
/// - 列表值与 $opts 中属性值以角标形式对应，如果没有找到对应项则忽略
/// @example
///   @include mfor-style(
///     (a: 1, b: 2 (5px 6px), 3 50% .5),
///     '> .',
///     '-test',
///     (line-height, background-position, opacity)
///   ){
///     z-index: 1;  
///   } 
@mixin mfor-style($opts, $prefix: '', $suffix: '', $list: background-position){
  $this-use: false;

  @if f4empty($list) == false{
    $this-type: type-of($list);

    @if $this-type == string{ //例：abc => (abc,)
      $list: ($list,);
      $this-type: list;
    }

    $this-length: length($list);

    @if $this-type == list{
      @each $key, $value in $opts{
        $value: f2list($value, false);
        $this-size: length($value);
        $this-through: min($this-size, $this-length);

        @if $this-through > 0{
          $this-rule: $prefix + $key + $suffix;

          #{$this-rule}{
            @for $i0 from 0 to $this-through{
              $i: $i0 + 1;
              $this-key: nth($list, $i);
              $this-value: nth($value, $i);

              @if $this-key == background-image{ //CSS background-image 进行 furl 调用
                $this-value: furl($this-value);
              }

              #{$this-key}: $this-value;
            }
            @content;
          }
        }
      }
    }
  }
}