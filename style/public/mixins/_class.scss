//  mfast-pos
//  -
/// 快捷设置属性（含有 top、right、bottom、left）
/// @param {1|2|3|4|x|y|o|list} $mode [o] 方位设置（所有的值都将被转换为 list 类型）
/// - 1、2、3、4 分别对应 top、right、bottom、left
/// - x：相当于 (2, 4)，为横向属性（right、left）
/// - y：相当于 (1, 3)，为纵向属性（top、bottom）
/// - o：相当于 (1, 2, 3, 4)，为所有属性
/// @param {number} $value [0] 属性值
/// @param {string} $prop [''] 方位前导值（拼接成一个新属性）
/// @param {string} $type [''] 方位后导值（拼接成一个新属性）
/// @example
///   @include mfast-pos(1 4, 0, border, width);
@mixin mfast-pos($mode: o, $value: 0, $prop: '', $type: ''){
  @if type-of($mode) == number{
    $mode: ($mode,);
  } @else if $mode == x{
    $mode: (2, 4);
  } @else if $mode == y{
    $mode: (1, 3);
  } @else if $mode == o{
    $mode: (1, 2, 3, 4);
  }

  $this-prev: $prop;
  $this-next: $type;

  @if $prop == radius{
    $this-next: $prop;
    $this-prev: border;
  } @else if f4empty($prop){
    $this-prop: '';
    $this-next: '';
  }

  $this-opts: fmatrix($prop);
  $this-length: length($mode);

  @for $i0 from 0 to $this-length{
    $i: $i0 + 1;
    $this-mode: nth($mode, $i);
    $this-nth: nth($this-opts, $this-mode);
    $this-key: fcompose($this-nth, $this-prev, $this-next);

    #{$this-key}: $value;
  }
}

//  mcenter
//  -
/// 设置居中
/// @param {tx|ty|to|px|py|po} $mode [to] 居中方式
/// - tx：使用 translateX 设置水平居中
/// - ty：使用 translateY 设置垂直居中
/// - to：使用 translate 设置水平和垂直居中
/// - px：使用 margin 设置水平居中
/// - py：使用 margin 设置垂直居中
/// - po：使用 margin 设置水平和垂直居中
/// @param {string} $type [absolute] 定位方式
/// @example
///   @include mcenter(tx, fixed);
@mixin mcenter($mode: to, $type: absolute){
  @if f4empty($type) == false{
    position: $type;
  }

  @if $mode == px{
    @include mfast-pos(x);
    margin: 0 auto;
  } @else if $mode == py{
    @include mfast-pos(y);
    margin: auto 0;
  } @else if $mode == po{
    @include mfast-pos(o);
    margin: auto;
  } @else if $mode == tx{
    @include mfast-pos(2, 50%);
    transform: translateX(50%); transform-style: preserve-3d;
  } @else if $mode == ty{
    @include mfast-pos(3, 50%);
    transform: translateY(50%); transform-style: preserve-3d;
  } @else{
    @include mfast-pos(2 3, 50%);
    transform: translate(50%, 50%); transform-style: preserve-3d;
  }
}

//  mratio
//  -
/// 设置相同的宽高
/// @param {number} $value [$gbasic-icon] 属性值
/// @param {负数|0|正数} $mode [1] 属性模式
/// - -1（负数）：仅设置 line-height 为高度属性
/// - 0：同时设置 height 和 line-height
/// - 1（正数）：仅设置 height 为高度属性
/// @param {number} $ratio [1] 比例值（高度 / 宽度）
/// @example
///   @include mratio(5px, 0, 2);
@mixin mratio($value: $gbasic-icon, $mode: 1, $ratio: 1){
  width: $value;

  $this-height: fcalc-single($value, $ratio, 1);

  @if $mode >= 0{
    height: $this-height;
  }
  
  @if $mode <= 0{
    line-height: $this-height;
  }
}

//  mheight
//  -
/// 设置高度和行高（倍数关系）
/// - mixin 有做 line-height 值优化
/// @param {number} $value -
/// @param {number|string} $row [1] 行数（height / line-height）
/// - string 类型的值为 calc 函数和 CSS var
/// @example
///   @include mheight(1em, 2);
@mixin mheight($value, $row: 1){
  $this-height: fcalc-single($value, $row, 1);
  $this-line: fline($value);

  height: $this-height; line-height: $this-line;
}

//  mc-mtop
//  -
/// 清除 first-child 上边距影响
/// @example
///   @include mc-mtop;
@mixin mc-mtop{
  &::before{
    @extend %epseudo-table;
  }
}

//  mc-float
//  -
/// 清除子元素设置浮动对父元素的影响
/// @example
///   @include mc-float;
@mixin mc-float{
  &::after{
    @extend %epseudo-table;
  }
}

//  mplaceholder
//  -
/// 设置 ::placeholder 样式
/// - 当 $color 为无效的（color 类型）值时，将不设置 color 属性
/// - 设置全局 $g4cssnext-group: true，可以将多个选择符以逗号分隔的方式并为组（这需要浏览器能正确识别不认识的选择器）
/// @param {color} $color [$gcolor-placeholder] 颜色值
/// @example
///   @include mplaceholder(#ccc);
@mixin mplaceholder($color: $gcolor-placeholder){
  $this4color: type-of($color) == color
    or color == inherit
    or color == initial
    or f4var($color);
  $this-opts: (
    '::-webkit-input-placeholder': null,
    '::-moz-placeholder': (
      opacity: 1 !important,
    ),
    ':-ms-input-placeholder': null,
  );

  @if $g4cssnext-group{
    $this-rules: '';
    
    @each $key, $list in $this-opts{
      $this-first: f4empty($this-rules);
      $this-separator: if($this-first, '', ', ');
      $this-rules: '#{$this-rules}#{$this-separator}&#{$key}';
      
      @if f4empty($list) == false{
        &#{$key}{
          @each $key, $value in $list{
            #{$key}: $value;
          }
        }
      }
    }

    #{$this-rules}{
      @if $this4color{
        color: $color;
      }

      @content;
    }
  } @else{
    @each $key, $list in $this-opts{
      &#{$key}{
        @if $this4color{
          color: $color;
        }

        @if f4empty($list) == false{
          @each $key, $value in $list{
            #{$key}: $value;
          }
        }

        @content;
      }
    }
  }
}

//  mellipsis
//  -
/// 多行超出（省略号效果）
/// @param {number} $line [1] 行数
/// @example
///   @include mellipsis;
///   @include mellipsis(2);
@mixin mellipsis($line: 1){
  @if type-of($line) != number or $line < 1{
    $line: 1;
  }

  $line: floor($line);

  @if $line == 1{
    @extend %eellipsis;
  } @else{
    @extend %eomitted;
    -webkit-line-clamp: $line;
  }
}

//  mappearance
//  -
/// 清除浏览器默认设置
/// @example
///   @include mappearance;
@mixin mappearance{
  @extend %eappearance;
}