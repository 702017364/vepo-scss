/// 表达式
@function of-calc($args, $product: 1, $reply: 0, $analysis: false){
  @return of-calcs((
    exp: $args,
    product: $product,
    reply: $reply,
    analysis: $analysis
  ));
}

/// 多表达式（涉及到包含calc字符串或多个calc的计算）
@function of-calcs($exps...){
  $exp-list: of-calc-analysisAndConcat($exps);
  $exp-list: of-calc-formatExps($exp-list);
  $exp-list: of-calc-mergeExpByProductAndReply($exp-list);
  $exp-list: of-calc-analysisOfAllRational($exp-list);
  $exp-list: of-calc-mergeExpByProductAndReply($exp-list);
  $exp-list: of-calc-mergeExpsDataByUnit($exp-list);
  $exp-list: of-calc-outputExps($exp-list);
  @return $exp-list;
}

/// 将集合中的字符串表达式进行分解并组合
@function of-calc-analysisAndConcat($exps){
  $exps-new: ();
  @each $exp in $exps {
    @if is-string($exp) and of-calc-isCalc($exp) {
      $exps-new: of-concat(
        $exps-new,
        of-calc-analysisCalcByExps($exp)
      );
    } @else {
      $exps-new: append(
        $exps-new,
        $exp
      );
    }
  }
  @return $exps-new;
}

/// 对表达式列表应用有理数则分解重组
@function of-calc-analysisOfAllRational($exps){
  $exps-new: ();
  @each $exp in $exps {
    $exps-new: append(
      $exps-new,
      of-calc-analysisOfRational($exp)
    );
  }
  @return $exps-new;
}

/// 如果表达式所有项都为有理数则分解重组
@function of-calc-analysisOfRational($exp){
  @if of-calc-isAllRational($exp) {
    $exp-product: map-get($exp, product);
    $exp-reply: map-get($exp, reply);
    $exp-new: ();
    @each $value in map-get($exp, exp) {
      $exp-new: append(
        $exp-new,
        of-calc-operation($value, $exp-product, $exp-reply)
      );
    }
    $exp: map-merge(
      $exp,
      (
        exp: $exp-new,
        product: 1,
        reply: 1
      )
    );
  }
  @return $exp;
}

/// 检测表达式是否所有项都为有理数
@function of-calc-isAllRational($exp){
  $exp-product: map-get($exp, product);
  @if is-string($exp-product) {
    @return false;
  } @else {
    $exp-reply: map-get($exp, reply);
    $exp-list: map-get($exp, exp);
    @each $value in $exp-list {
      @if is-number($value) {
        @if not(of-calc-isRational($value, $exp-product, $exp-reply)) {
          @return false;
        }
      } @else {
        @if not(is-rational-number($exp-product)) {
          @return false;
        }
      }
    }
  }
  @return true;
}

/// 检测表达式项是否为有理数
@function of-calc-isRational($a, $b, $reply){
  @if $reply == 0 {
    @return is-rational-division($a, $b);
  } @else {
    @return is-rational-multiplication($a, $b);
  }
}

/// 输出表达式列表
@function of-calc-outputExps($exps){
  $exps-length: length($exps);
  @if $exps-length == 0 {
    @return 0;
  } @else if $exps-length == 1 {
    $exps-item: nth($exps, 1);
    $exp-list: map-get($exps-item, exp);
    $exp-product: map-get($exps-item, product);
    $exp-list-length: length($exp-list);
    @if $exp-list-length == 0 {
      @return 0;
    } @else if is-number($exp-product) and $exp-list-length == 1 {
      $exp-first: nth($exp-list, 1);
      @if is-number($exp-first) or $exp-product == 1 {
        @return of-calc-operation($exp-first, $exp-product, map-get($exps-item, reply));
      }
    }
  }
  $exp-str: unquote('calc(');
  @for $i from 1 through length($exps) {
    $exp-str-join: if(
      $i == 1,
      '',
      of-calc-plus_minusJoin(1)
    );
    $exp-str-item: of-calc-outputExp(nth($exps, $i));
    $exp-str: unquote('#{$exp-str}#{$exp-str-join}#{$exp-str-item}');
  }
  $exp-str: unquote('#{$exp-str})');
  @return $exp-str;
}

/// 输出表达式
@function of-calc-outputExp($exp){
  $exp-list: map-get($exp, exp);
  $exp-list-length: length($exp-list);
  @if $exp-list-length == 0 {
    @return 0;
  } @if $exp-list-length == 1 {
    @return of-calc-outputExpToOnlyValue($exp);
  } @else {
    @return of-calc-outputExpToString($exp);
  }
}

/// 输出表达式（仅有一个值版）
@function of-calc-outputExpToOnlyValue($exp){
  $exp-list: map-get($exp, exp);
  $exp-product: map-get($exp, product);
  $exp-reply: map-get($exp, reply);
  $exp-first: nth($exp-list, 1);
  @return of-calc-operation($exp-first, $exp-product, $exp-reply);
}

/// 输出表达式（列表版）
@function of-calc-outputExpToString($exp){
  $exp-list: map-get($exp, exp);
  $exp-product: map-get($exp, product);
  $exp-reply: map-get($exp, reply);
  $exp-analysis: map-get($exp, analysis);
  @if $exp-product == 1 or $exp-product == -1 {
    $exp-analysis: true;
  }
  @if is-string($exp-product) {
    $exp-analysis: false;
  }
  @if $exp-analysis == true {
    @return of-calc-outputExpToStringByAnalysis($exp-list, $exp-product, $exp-reply);
  } @else {
    @return of-calc-outputExpToStringByDefault($exp-list, $exp-product, $exp-reply);
  }
}

/// 输出字符串表达式（默认版）
@function of-calc-outputExpToStringByDefault($list, $product, $reply){
  $list-str: of-calc-join($list);
  $list-join: of-calc-mult_diviJoin($reply);
  @return unquote('(#{$list-str})#{$list-join}#{$product}');
}

/// 输出字符串表达式（分解版）
@function of-calc-outputExpToStringByAnalysis($list, $product, $reply){
  $exp-new-list: ();
  @each $value in $list {
    $exp-new-list: append(
      $exp-new-list,
      of-calc-operation($value, $product, $reply)
    );
  }
  @return of-calc-join($exp-new-list);
}

/// 表达式连接
@function of-calc-join($list){
  $list-str: '' !default;
  $list-length: length($list);
  @for $i from 1 through $list-length {
    $list-item: nth($list, $i);
    @if $i == 1 {
      $list-str: $list-item;
    } @else {
      $list-item-join: 1 !default;
      @if is-number($list-item) {
        @if $list-item < 0 {
          $list-item-join: 0;
          $list-item: abs($list-item);
        }
      } @else {
        $list-item: of-calc-operation($list-item, 1, 1);
        @if str-slice($list-item, 1, 1) == '-' {
          $list-item-join: 0;
          $list-item: str-slice($list-item, 2);
        }
      }
      $list-str-join: of-calc-plus_minusJoin($list-item-join);
      $list-str: unquote('#{$list-str}#{$list-str-join}#{$list-item}');
    }
  }
  @return $list-str;
}

/// 分解 calc 函数
@function of-calc-analysisCalc($value){
  @return of-calc-analysisCalcByExps($value);
}

/// 分解 calc 函数为多表达式
@function of-calc-analysisCalcByExps($value){
  $value: str-slice($value, 6, -2);
  $exps: of-calc-analysisSplitMult_divi($value);
  $exps: of-calc-analysisToProductAfter($exps);
  $exps: of-calc-analysisToMapAndDealWith($exps);
  $exps: of-calc-analysisToAllListOfNumber($exps);
  @return $exps;
}

/// 将所有表达式列表分解成数组
@function of-calc-analysisToAllListOfNumber($exps){
  $exps-new: ();
  @each $exp in $exps {
    $exps-new: append(
      $exps-new,
      of-calc-analysisToListOfNumber($exp)
    );
  }
  @return $exps-new;
}

/// 将表达式列表分解成数组
@function of-calc-analysisToListOfNumber($exp){
  $exp-list: map-get($exp, exp);
  $exp-list: of-calc-analysisToSplitPlus_minus($exp-list);
  $exp-new: ();
  @each $value in $exp-list {
    $exp-new: append(
      $exp-new,
      if(
        of-calc-isCSS4_var($value),
        $value,
        ofnum-unit($value)
      )
    );
  }
  @return map-merge(
    $exp,
    (exp: $exp-new)
  );
}

/// 将字符串转换成 map，并做处理
@function of-calc-analysisToMapAndDealWith($exps){
  $exps-new: ();
  @each $exp in $exps {
    $exp: of-calc-splitCSS4_varWithMult_Divi($exp);
    $exp-list: map-get($exp, exp);
    $exp-product: map-get($exp, product);
    $exp-first: str-slice($exp-list, 1, 1);
    @if $exp-first == '(' {
      $exp-list: str-slice($exp-list, 2, -2);
    } @else if $exp-first == '-' {
      $exp-list0: str-slice($exp-list, 2);
      @if of-calc-isCSS4_var($exp-list0) {
        $exp-list: $exp-list0;
        $exp-product: $exp-product * -1;
      }
    }
    $exp: map-merge(
      $exp,
      (
        product: $exp-product,
        exp: $exp-list
      )
    );
    $exps-new: append(
      $exps-new,
      $exp
    );
  }
  @return $exps-new;
}

/// 使用乘除连接符对表达式进行分割
@function of-calc-analysisSplitMult_divi($value){
  $exps: of-calc-analysisCalcByPlus(
    $value,
    of-calc-analysisCalcSplitByExps(1)
  );
  @return of-calc-analysisCalcByPlus(
    $exps,
    of-calc-analysisCalcSplitByExps(0)
  );
}

/// 使用连接符对表达式进行分割
@function of-calc-analysisCalcByPlus($exps, $exps-join){
  @if not(is-list($exps)){
    $exps: ($exps, );
  }
  $exps-new: ();
  $exps-is: str-index($exps-join, '(');
  $exps-is: not(isempty(str-index)) and $exps-is == str-length($exps-join);
  @each $exp in $exps {
    $exp-list: str-split($exp, $exps-join);
    @if $exps-is == true {
      $exp-list: of-calc-analysisToFill($exp-list);
    }
    $exps-new: of-concat($exps-new, $exp-list);
  }
  @return $exps-new;
}

/// 分解出 product 之后的小表达式
@function of-calc-analysisToProductAfter($exps){
  $exps-new: ();
  @each $exp in $exps {
    $exp-after: of-calc-analysisToProductAfterIndex($exp);
    @if $exp-after != -1 {
      $exp-before: str-slice($exp, 1, $exp-after - 1);
      $exp-before: of-calc-analysisSplitMult_divi($exp-before);
      $exps-new: of-concat($exps-new, $exp-before);
      $exp-after: str-slice($exp, $exp-after);
      $exp-after: of-calc-analysisToSplitPlus_minus($exp-after);
      $exps-new: of-concat($exps-new, $exp-after);
    } @else {
      $exps-new: append($exps-new, $exp);
    }
  }
  @return $exps-new;
}

/// 将字符串根据加/减连接符进行分割成小表达式
@function of-calc-analysisToSplitPlus_minus($exp){
  $exp-indexs: of-calc-analysisToSubOptionIndexs($exp);
  $exp-length: length($exp-indexs);
  $exp-added: -4;
  @if $exp-length == 0 {
    @return ($exp, );
  } @else {
    $exp-news: ();
    $exp-first: nth($exp-indexs, 1);
    $exp-first: abs($exp-first);
    @if $exp-first + $exp-added > 0 {
      $exp-news: append(
        $exp-news,
        str-slice($exp, 1, $exp-first + $exp-added)
      );
    }
    @for $i from 1 through $exp-length {
      $exp-index: nth($exp-indexs, $i);
      $exp-symbol: if(
        $exp-index < 0,
        '-',
        ''
      );
      $exp-index: abs($exp-index);
      $exp-chars: if(
        $i == $exp-length,
        str-slice($exp, $exp-index),
        str-slice($exp, $exp-index, abs(
          nth($exp-indexs, $i + 1)
        ) + $exp-added)
      );
      /* @if of-calc-isCSS4_var($exp-chars) {
  
      } @else {
        $exp-chars: unquote('#{$exp-symbol}#{$exp-chars}');
      } */
      $exp-chars: unquote('#{$exp-symbol}#{$exp-chars}');
      $exp-news: append(
        $exp-news,
        $exp-chars
      );
    }
    @return $exp-news;
  }
}

/// 将字符串根据加/减连接符进行分割成小表达式，返回 index 集合
@function of-calc-analysisToSubOptionIndexs($value){
  $exp-list: ();
  $value-length: str-length($value);
  $value-added: 2;
  $exp-plus: of-calc-plus_minusJoin(1);
  $exp-minus: of-calc-plus_minusJoin(0);
  $value-indexs: ();
  @for $i from 1 through ($value-length - $value-added) {
    $value-chars: str-slice($value, $i, $i + $value-added);
    @if $value-chars == $exp-plus {
      $value-indexs: append(
        $value-indexs,
        $i + $value-added + 1
      );
    } @else if $value-chars == $exp-minus {
      $value-indexs: append(
        $value-indexs,
        ($i + $value-added + 1) * -1
      );
    }
  }
  @return $value-indexs;
}

/// 获取表达式中 product 之后的分表达式的起始位置
@function of-calc-analysisToProductAfterIndex($exp){
  $exp-plus: of-calc-plus_minusJoin(1);
  $exp-minus: of-calc-plus_minusJoin(0);
  $exp-join: of-calc-mult_diviJoin(1);
  $exp-index: str-index($exp, $exp-join);
  @if isempty($exp-index) {
    $exp-join: of-calc-mult_diviJoin(0);
    $exp-index: str-index($exp, $exp-join);
  }
  @if isempty($exp-index){
    @return -1;
  }
  $exp-index: $exp-index + str-length($exp-join) + 1;
  $exp-length: str-length($exp);
  @if $exp-index > $exp-length {
    @return -1;
  }
  $exp-is: true;
  @for $i from $exp-index through $exp-length {
    $exp-chars: str-slice($exp, $i, $i + 2);
    @if $exp-chars == $exp-plus or $exp-chars == $exp-minus {
      @return $i;
    }
  }
  @return -1;
}

/// 填补切割造成的左括号缺失
@function of-calc-analysisToFill($exps){
  $exps-new: ();
  @for $i from 1 through length($exps) {
    $exp: nth($exps, $i);
    @if $i == 1 {
      $exp: unquote('#{$exp}');
    } @else {
      $exp: unquote('(#{$exp}');
    }
    $exps-new: append(
      $exps-new,
      $exp
    );
  }
  @return $exps-new;
}

/// 获取分解 calc 函数为多表达式使用的切割符
@function of-calc-analysisCalcSplitByExps($value){
  $value-split: of-calc-plus_minusJoin($value);
  @return unquote('#{$value-split}(');
}

/// 返回运算结果
@function of-calc-operation($a, $b, $reply){
  $not-has-string: true;
  @if $b == 1 or $b == -1 {
    @return of-calc-operationToSelf($a, $b);
  }
  @if is-string($a) {
    $not-has-string: false;
    $a: of-calc-formatCSS4_var($a);
  }
  @if is-string($b) {
    $not-has-string: false;
    $b: of-calc-formatCSS4_var($b);
  }
  @if $reply == 0 {
    @return if(
      $not-has-string and is-rational-division($a, $b),
      $a / $b,
      unquote('#{$a} / #{$b}')
    );
  } @else {
    @return if(
      $not-has-string and is-rational-multiplication($a, $b),
      $a * $b,
      unquote('#{$a} * #{$b}')
    );
  }
}

/// 返回运算结果（当第二个参数值为 1 或 -1）
@function of-calc-operationToSelf($a, $b){
  @if is-number($a) {
    @return $a * $b;
  } @else {
    $a: of-calc-formatCSS4_var($a);
    @return if(
      $b == 1,
      $a,
      unquote('-#{$a}')
    );
  }
}

/// 根据单位对所有表达式进行合并相同数据
@function of-calc-mergeExpsDataByUnit($exps){
  $exp-list: ();
  @each $exp in $exps {
    $exp-list: append(
      $exp-list,
      of-calc-mergeExpDataByUnit($exp)
    );
  }
  @return $exp-list;
}

/// 根据单位对表达式进行合并相同数据
@function of-calc-mergeExpDataByUnit($exp){
  $data-list: ();
  @each $key, $list in of-calc-categoryOfUnit($exp) {
    $data-sum: 0 !default;
    @if of-calc-isCSS4_var($key) {
      $data-sum: of-calc-CSS4_var-sum($list);
    } @else {
      $data-sum: of-calc-sum($list);
    }
    @if $data-sum != 0 {
      $data-list: append(
        $data-list,
        $data-sum
      );
    }
  }
  @return map-merge(
    $exp,
    (exp: $data-list)
  );
}

/// 常规求和
@function of-calc-sum($list){
  $list-sum: 0;
  @each $value in $list {
    $list-sum: $list-sum + $value;
  }
  @return $list-sum;
}

/// CSS4 var 求和
@function of-calc-CSS4_var-sum($list){
  $list-var: null !default;
  $list-count: 0;
  @each $value in $list {
    $value-map: of-calc-splitCSS4_varWithMult_Divi($value);
    $value-product: map-get($value-map, product);
    @if isempty($list-var) {
      $list-var: map-get($value-map, exp);
      $list-var: of-calc-formatCSS4_var($list-var);
    }
    @if map-get($value-map, reply) == 0 {
      $value-product: 1 / $value-product;
    }
    $list-count: $list-count + $value-product;
  }
  @if $list-count == 0 {
    @return 0;
  } @else if $list-count == 1 {
    @return $list-var;
  } @else {
    @return unquote('#{$list-var}#{of-calc-mult_diviJoin(1)}#{$list-count}');
  }
}

/// 格式化 CSS4 变量
@function of-calc-formatCSS4_var($value){
  @return if(
    of-calc-isCSS4_var($value),
    $value,
    unquote('var(#{$value})')
  );
}

/// 根据单位对表达式进行分类
@function of-calc-categoryOfUnit($exp){
  $unit-map: ();
  @each $item in map-get($exp, exp) {
    $item-key: '' !default;
    $item-list: () !default;
    @if is-string($item) {
      $item-key: of-calc-formatCSS4_var($item);
      $item-key: of-calc-splitCSS4_varWithMult_Divi($item-key);
      $item-key: map-get($item-key, exp);
    } @else if is-number($item) {
      $item-key: unit($item);
    }
    $unit-map: of-calc-mergeDataOrCreateArrayOfUnit(
      $unit-map,
      $item-key,
      $item
    );
  }
  @return $unit-map;
}

/// 使用乘/除连接符对表达式进行分割解析
@function of-calc-splitCSS4_varWithMult_Divi($value){
  $exp-reply: 1;
  $exp-split: of-calc-mult_diviJoin(1);
  $exp-split-index: str-index($value, $exp-split);
  @if isempty($exp-split-index) {
    $exp-reply: 0;
    $exp-split: of-calc-mult_diviJoin(0);
  }
  $exp-item: str-split($value, $exp-split);
  @return (
    exp: nth($exp-item, 1),
    product: of-calc-productToCSS4_var($exp-item),
    reply: $exp-reply
  );
}

/// 格式化 CSS4 var 中的 product
@function of-calc-productToCSS4_var($list){
  @if length($list) > 1 {
    $value: nth($list, 2);
    @if of-calc-isCSS4_var($value) {
      @return $value;
    } @else {
      @return ofnum($value);
    }
  } @else {
    @return 1;
  }
}

/// 检测 Map 中是否存在数据，如果存在则合并数据，否则创建一个 List 并赋值
@function of-calc-mergeDataOrCreateArrayOfUnit($map, $key, $value){
  $data-new: () !default;
  @if map-has-key($map, $key) {
    $data-new: append(
      map-get($map, $key),
      $value
    );
  } @else {
    $data-new: ($value);
  }
  @return map-merge(
    $map,
    ($key: $data-new)
  );
}

/// 检测是否为 css4 变量
@function of-calc-isCSS4_var($value){
  @return str-slice($value, 1, 3) == 'var';
}

/// 检测是否为 calc 函数
@function of-calc-isCalc($value){
  @return str-slice($value, 1, 4) == 'calc';
}

/// 根据 product 和 reply 合并相同项
@function of-calc-mergeExpByProductAndReply($exps){
  $exp-map: ();
  @each $exp in $exps {
    $exp-product: map-get($exp, product);
    $exp-reply: map-get($exp, reply);
    @if $exp-product == -1 {
      $exp: of-calc-toggleNegativeValueOfExp($exp);
      $exp-product: map-get($exp, product);
    }
    $exp-key: unquote('#{$exp-reply}#{$exp-product}');
    @if is-number($exp-product) and $exp-reply == 0 {
      @if is-rational-number($exp-product) {
        $exp-key: unquote('1#{1 / $exp-product}');
      }
    }
    $exp-map: of-calc-mergeDataOrCreateArrayOfExp(
      $exp-map,
      $exp-key,
      $exp
    );
  }
  $exps: ();
  @each $key, $exp in $exp-map {
    $exps: append(
      $exps,
      $exp
    );
  }
  @return $exps;
}

/// 对表达式进行负值切换
@function of-calc-toggleNegativeValueOfExp($exp){
  $exp-new: ();
  @each $value in map-get($exp, exp) {
    $exp-new: append(
      $exp-new,
      if(
        is-number($value),
        $value * -1,
        unquote('#{of-calc-formatCSS4_var($value)}#{of-calc-mult_diviJoin(1)}-1')
      )
    );
  }
  @return map-merge(
    $exp,
    (
      product: 1,
      exp: $exp-new
    )
  );
}

/// 检测是否存在表达式，存在则合并数据，否则创建一个 List 并赋值
@function of-calc-mergeDataOrCreateArrayOfExp($map, $key, $exp){
  $exp-new: () !default;
  @if map-has-key($map, $key) {
    $exp-old: map-get($map, $key);
    $exp-new-list: map-get($exp-old, exp);
    $exp-new-list: of-concat(
      $exp-new-list,
      map-get($exp, exp)
    );
    $exp-new: map-merge(
      $exp-old,
      (exp: $exp-new-list)
    );
  } @else {
    $exp-new: $exp;
  }
  @return map-merge(
    $map,
    ($key: $exp-new)
  );
}

/// 格式化表达式列表
@function of-calc-formatExps($exps){
  $exp-list: ();
  @each $exp in $exps {
    $exp-list: append(
      $exp-list,
      of-calc-formatExp($exp)
    );
  }
  @return $exp-list;
}

/// 格式化表达式
@function of-calc-formatExp($exp){
  $exp-type: type-of($exp);
  $exp-function-name: of-calc-getMergeFunction($exp-type);
  @if function_exists($exp-function-name) {
    @return call(
      get-function($exp-function-name),
      $exp
    );
  }
  @warn('Invalid type');
}

/// 获取表达式对应的合并方法
@function of-calc-getMergeFunction($type){
  $exp-first: to-upper-case(str-slice($type, 1, 1));
  $exp-last: str-slice($type, 2);
  @return unquote('of-calc-mergeConfigBy#{$exp-first}#{$exp-last}');
}

/// 提供值类型为 map 的合并 
@function of-calc-mergeConfigByMap($value){
  $exp-list: map-get($value, exp);
  @if not(is-list($exp-list)) {
    $value: map-merge(
      $value,
      (exp: ($exp-list, ))
    );
  }
  @return of-calc-mergeConfig($value);
}

/// 提供值类型为 list 的合并
@function of-calc-mergeConfigByList($value, $config: ()){
  @return of-calc-mergeConfigByMap(
    map-merge(
      $config,
      (exp: $value)
    )
  );
}

/// 提供值类型为 number 的合并
@function of-calc-mergeConfigByNumber($value, $config: ()){
  @return of-calc-mergeConfigByList(
    ($value, ),
    $config
  );
}

/// 提供值类型为 string 的合并
@function of-calc-mergeConfigByString($value, $config: ()){
  @return of-calc-mergeConfigByList(
    ($value, ),
    $config
  );
}

/// 合并选项
@function of-calc-mergeConfig($config: ()){
  $config: of-calc-mergeConfigBySimplify($config);
  @return map-merge((
    product: 1,
    reply: 0,
    analysis: false
    ), $config);
}
  
/// 合并选项（简化 product 长度）
@function of-calc-mergeConfigBySimplify($config){
  $exp-product: map-get($config, product);
  @if isempry($exp-product) and is-number($exp-product) and is-rational-number($exp-product) {
    $exp-product-length: str-length('#{$exp-product}');
    $exp-product-inverted-length: str-length('#{1 / $exp-product}');
    @if $exp-product-inverted-length < $exp-product-length {
      @return map-merge(
        $config,
        (
          product: 1 / $exp-product,
          reply: if(
            map-get($config, reply) == 1,
            0,
            1
          )
        )
      );
    }
  }
  @return $config;
}

/// 返回乘/除法连接符
@function of-calc-mult_diviJoin($value){
  @return if(
    $value == 1,
    ' * ',
    ' / '
  );
}

/// 返回加/减号连接符
@function of-calc-plus_minusJoin($value){
  @return if(
    $value == 1,
    ' + ',
    ' - '
  );
}