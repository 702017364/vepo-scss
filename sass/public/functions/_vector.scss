//  f2all
//  -
/// 单位转换（总接口）
/// @param {number} $value -
/// @param {number} $basic [$gbasic-size] 转换的参数值
/// @param {number} $dpr [$gdpr] dpi 设置
/// @return {number} -
/// @example
///   f2all(32px, 1rem)   //2rem
@function f2all($value, $basic: $gbasic-size, $dpr: $gdpr){
  $this-unit: unit($gvector);
  $this-viewport: index(vmin vmax vh vw, $this-unit) != null;

  $this-name: if(
    $this-viewport,
    unquote('f2viewport'),
    unquote('f2#{$this-unit}')
  );

  @if function_exists($this-name){
    $this-value: call(get-function($this-name), $value, $basic);

    @return $this-value / $dpr;
  }

  @return $value;
}

//  f2rem
//  -
/// 返回一个将 px 单位转换为 rem 的值
/// - 会对 $value 进行 f2px 调用
/// @param {number} $value -
/// @param {number} $base [null] 无实际意义，只为了方便 function f2all 内部调用而设置
/// @return {number} -
/// @example
///   f2rem(20) //1.25rem
@function f2rem($value, $basic: null){
  $this-value: f2px($value);

  @if $this-value == 0{
    @return 0;
  }

  @if f4px($this-value){
    $this-value: $this-value / $gbasic-size * 1rem;
    $this-value: fround($this-value, $gscss-dec);

    @return $this-value;
  }

  @return $value;
}

//  f2viewport
//  -
/// 返回一个将 px 单位转换为视窗单位（vw、vh、vmin、vmax）的值
/// - 会对 $value 进行 f2px 调用
/// @param {number} $value -
/// @param {number} $vector [$gviewport-vector] 设置返回值向量（单位）
/// @return {number} -
/// @example
///   f2viewport(75, 1vmin) //20vmin
///   f2viewport(75, 1vmax) //20vmax
///   f2viewport(75, 1vh)   //20vh
///   f2viewport(75, 1vw)   //20vw
@function f2viewport($value, $vector: $gviewport-vector){
  $this-vector: fvector($vector) ;
  $this-value: f2px($value);

  @if $this-value == 0{
    @return 0;
  }

  @if f4px($this-value){
    @return $this-value / $gviewport-width * 100 * $this-vector;
  }

  @return $value;
}

//  f2px
//  -
/// 返回一个（非 0 纯数字）添加了 px 单位的值
/// @param {number} $value -
/// @param {object} $base [null] 无实际意义，只为了方便 function f2all 内部调用而设置
/// @return {number} -
/// @example
///   @f2px(2)  //2px
///   @f2px(0)  //0
@function f2px($value, $basic: null){
  $this-if: type-of($value) == number
    and $value != 0
    and unit($value) == '';
  
  @if $value == 0{
    @return 0;
  }
  
  @if type-of($value) == number and unit($value) == ''{
    @return $value * 1px;
  }

  @return $value;
}

//  fless
//  -
/// 返回一个去除单位后的纯数字
/// @param {number} $value -
/// @return {number} -
/// @example
///   fless(3px)    //3
///   fless(2.1%)  //2.1
///   fless(5)      //5
@function fless($value){
  @if unitless($value){
    @return $value;
  }

  @return $value / fvector($value);
}

//  fvector
//  -
/// 返回单位向量
/// @param {number} $value -
/// @return {number|null} -
/// @example
///   fvector(3px)    //1px
///   fvector(2.1vw)  //1vw
@function fvector($value){
  $this-unit: unit($value);
  $this-vector: map-get($gvector-table, $this-unit);

  @return $this-vector;
}