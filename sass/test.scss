@import 'main';

@function oftest($name, $value){
  @return unquote('#{$name}: #{$value}');
}

@debug of-calcs('calc(var(--a) * -1 - var(--a))');

// @debug of-calcs('calc(2px + (-5px + 6vh + 7%) / 4 + (var(--a) + 7%) * 3 - var(--b) + 10px - 6pt - (4vmin + 3vh) / 7)');

.of-calcs-test{
  --a: 10px;
  --b: 20px;
  $this-width: of-calcs(
    'calc(2px + (-5px + 6vh + 7%) / 4 + (var(--a) + 7%) * 3 - var(--b) + 10px - 6pt - (4vmin + 3vh) / 7)',
    (
      exp: (3px, 2vh, --a, --b),
      product: -4
    ),
    (
      exp: (3px, --a),
      product: -1,
      reply: 1
    ),
    (1px 2em),
    -4vh,
    --a,
    (
      exp: (5vw 6vh)
    ),
    --a,
    (
      exp: (5vw 6vmin),
      product: 2,
      reply: 1
    ),
    (
      exp: (7% 2vw -15px),
      product: 3
    ),
    (
      exp: (7% 2vw),             
      product: 5,
      analysis: true

    ),
    (
      exp: (--a 10px),
      product: 1 / 3,
      reply: 1
    )
  );
  /* $this-width: of-calcs(
    'calc(200px)'
  ); */
  // @debug $this-width;
  width: $this-width; line-height: 1em; background-color: #ccc;
  @include after('of-calcs 测试');
}

/* @debug oftest(
  'is-rational-number',
  is-rational-number(-3)
); */

/* @debug oftest(
  'is-rational-division',
  is-rational-division(6, 3)
); */

/* @debug oftest(
  'is-rational-multiplication',
  is-rational-multiplication(0.056, 0.034)
); */

//type=checkbox :indeterminate
#indeterminate{
  &:indeterminate{
    + span{
      color: #f00;
    }
  }
}

//cssnext
.cssnext{
  $this-var: --test-color;
  #{$this-var}: $r-color;
  --a: 20px;
  --b: 1em;
  @include transition;
  width: ofcalc(100% --a --b -10em, 2, 0, true);
  border: 0 solid;
  border-top-width: ofcalc(--a, .75, 1, true);
  border-right-width: ofcalc(--a 10px, 2, 0);
  border-bottom-width: ofcalc(--a 10px, .5, 1);
  border-left-width: ofcalc(--a 10px, 2, 0, true);
  line-height: ofcalc(1rem --a --b 1em, 2, 0);
  text-indent: ofcalc(--a);
  color: var($this-var);
  @include before('cssnext => var 测试');
  &:hover{
    #{$this-var}: $rc-light;
  }
}

//不嵌套标签做表格固定效果（ie11 不支持，Firefox ）
.scroll-translate{
  width: 60%; margin-left: 10%; height: 150px; position: relative; overflow: auto;
}

//表格单元格动画效果
.table-transition{
  --border-width: 1px;
  width: 80%; margin: auto; padding: var(--border-width); border-collapse: separate; border-spacing: 0; line-height: 1.7; box-sizing: border-box;
  > tbody{
    > tr{
      $this-args: null, .5s;
      &:nth-child(2n){
        @include keyframes($this-args...){
          0%{
            transform: translate(-30%, 0); opacity: 0;
          }
          100%{
            transform: translate(0, 0); opacity: 1;
          }
        }
      }
      &:nth-child(2n + 1){
        @include keyframes($this-args...){
          0%{
            transform: translate(30%, 0); opacity: 0;
          }
          100%{
            transform: translate(0, 0); opacity: 1;
          }
        }
      }
      &:not(:last-child){
        > td{
          &:nth-child(2n){
            @include keyframes($this-args...){
              0%{
                transform: translate(0, 100%); opacity: 0;
              }
              100%{
                transform: translate(0, 0); opacity: 1;
              }
            }
          }
          &:nth-child(2n + 1){
            @include keyframes($this-args...){
              0%{
                transform: translate(0, -100%); opacity: 0;
              }
              100%{
                transform: translate(0, 0); opacity: 1;
              }
            }
          }
        }
      }
      @include not(':first-child', ':last-child', ':nth-child(5)'){
        color: #f00;
      }
      @include matches(':nth-child(2)', ':nth-child(3)'){
        text-shadow: 0 0 .2em;
        &:hover{
          text-shadow: 0 0 .2em #000;
        }
      }
    }
  }
  td, th{
    box-shadow: 0 0 0 var(--border-width) #444; background-color: #fff;
  }
}

.parabola{
  $this-top: 8em;
  $this-left: 20vw;
  &-test{
    width: $this-left; height: $this-top; position: relative; border: 1px solid;
    &:hover{
      > .parabola-box{
        transform: translate($this-left, 0) translateX(-100%);
        @include after(null){
          transform: translate(0, $this-top) translateY(-100%);
        }
      }
    }
  }
  &-box{
    $this-duration: 1s;
    @include ratio(2em);
    transition: transform $this-duration cubic-bezier(0.42, 0, 1, 0.18);
    @include after(){
      @include ratio(100%);
      display: block; transition: transform $this-duration cubic-bezier(0, 0, 0, 1.24); background-color: #ccc;
    }
  }
}

.counter-none{
  ul{
    counter-reset: counter-count 0;
  }
  li{
    padding-left: 2em; counter-increment: counter-count;
    > span{
      @include after(null){
        content: counters(counter-count, '-');
      }
    }
  }
  > li{
    &:last-child{
      display: none;
    }
  }
}

.css-color{
  height: 5em;; position: relative;
  @include before(){
    @include ratio(100%);
    position: absolute; top: 0; left: 0; background-color: rgb(255, 0, 0);
  }
  @include after(){
    @include ratio(50%);
    @include v(po);
    background-color: rgb(254, 0, 0);
  }
}

.css-animation{
  padding: 2em;
  &-button{
    position: relative; display: inline-block;
    > p{
      @include keyframes(null ,1s linear forwards){
        0%{
          opacity: 1;
        }
        100%{
          opacity: 0;
        }
      };
      width: 10vw; height: 4em; position: absolute; top: 100%; left: 0; background: linear-gradient(#f00, #0f0, #00f);
    }
    &:hover{
      > p{
        // animation-direction: reverse; animation-duration: 1.5s;
        @include keyframes(null ,1s linear forwards){
          0%{
            opacity: 0;
          }
          100%{
            opacity: 1;
          }
        };
      }
    }
  }
  > input{
    display: block;
  }
  > button{
    margin-top: 3em;
  }
}

.jitter-blur{
  height: 200px; padding: 20px; position: relative; border: 1px dashed #000;
  &-box{
    @include v(ty);
    min-width: 10%; white-space: nowrap; background-color: #ccc;
    > p{
      margin-bottom: 1em;
    }
    > i{
      // position: absolute; top: 1em; left: 0;
    }
    @include after('after'){
      @include transition;
      display: block; //transform: scale(0);
    }
    &:hover{
      @include after(null){
        transform: scale(1);
      }
    }
  }
}

/* @debug oftest(
  'str-split', 
  str-split('a-c-v', '-')
); */

/* @debug oftest(
  'str-split-for', 
  str-split-for(1 2 3, 'a-c-v', '-')
); */

/* @include IIFE{
  $icons1: (
    a: aa,
    b: bb
  );
  $icons2: a b c d c;
  @debug oftest(
    'icons => Map',
    icons($icons1, 'icon-', '.png')
  );
  @debug oftest(
    'icons => List',
    icons($icons2, 'icon-', '.png')
  );
} */

@include IIFE{
  $value: all(17);
 .ofline{
   //要将 html 的 font-size 修改成一个不可将 $value 除尽的值才可以看到效果，如 15px
   @include before('未经过方法 ofline 处理的 line-height'){
     line-height: $value; display: block;
   }
   @include after('经过方法 ofline 处理的 line-height'){
     line-height: ofline($value); display: block;
   }
 }
}

/* @debug oftest(
  'ofnum',
  ofnum('34.4578')
); */

/* @debug oftest(
  'ofnum-unit',
  ofnum-unit('123vmin')
); */

.for-style{
  > li{
    width: 3em; line-height: 1em; margin-left: .2em; border: .3em solid; float: left; counter-increment: li-count; text-align: center; background: 50% / 100% 100% no-repeat;
    @include before(null){
      content: counter(li-count);
    }
  }
  @include for-style(
    (
      1: #000 #000 'img3.jpg',
      2: #333 #333 'img4.jpg',
      3: #666 #666 'img2.jpeg',
      4: #999 #999 'img4.jpeg'
    ),
    ':nth-child(',
    ')',
    border-color color background-image
  );
  @include c-float;
}

/* @debug oftest(
  'ofsize',
  ofsize(10)
); */

/* @debug oftest(
  'ofround',
  ofround(1234, -2)
); */

.keyframes{
  @include keyframes(){
    0%{
      color: #ccc;
    }
  }
}

.vmin{
  height: 1em; position: relative;
  @include after(){
    @include arrow;
  }
}

.elb{
  $el-width: 80px;
  //@include triangle($el-width, 30px, $mode: 2);
  @include triangle-equil($el-width, 2);
  margin: 1em;
}